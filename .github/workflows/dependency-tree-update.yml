name: Dependency tree update
on:
  workflow_call:
    secrets:
      github-token:
        description: Token used to checkout code and create PR
        required: true
      gpg-key:
        description: The client key to use for commit author and signing
        required: true
      npm-token:
        description: Token used to authenticate to the private GitHub npm registry
        required: true
    inputs:
      path:
        description: Path to the project folder
        default: "."
        required: false
        type: string
      runs-on:
        description: Where to run the workflow. More information at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idruns-on
        default: "ubuntu-latest"
        required: false
        type: string
jobs:
  get-runner:
    name: Determine runner type
    runs-on: ubuntu-latest
    outputs:
      runs-on: ${{ steps.runs-on.outputs.runs-on }}
    steps:
      - id: runs-on
        run: |
          RUNS="${{ inputs.runs-on }}"
          if [[ "${RUNS}" == "self-hosted" ]]; then
            echo "::set-output name=runs-on::[\"self-hosted\", \"ts-large-x64-docker-large\"]";
          elif [[ "${RUNS}" =~ ^ts-.* ]]; then
            echo "::set-output name=runs-on::[\"self-hosted\", \"${RUNS}\"]";
          else
            echo "::set-output name=runs-on::[\"${RUNS}\"]";
          fi
  build:
    name: tradeshift/dependency-tree-update
    runs-on: ${{ fromJson(needs.get-runner.outputs.runs-on) }}
    needs: ["get-runner"]
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2
      - name: Check for .nvmrc file root folder
        continue-on-error: true
        id: nvmrcRoot
        run: |
          [ -f .nvmrc ]
      - name: Check for .nvmrc file input path
        if: ${{ steps.nvmrcRoot.outcome != 'success' }}
        working-directory: ${{ inputs.path }}
        continue-on-error: true
        id: nvmrc
        run: |
          [ -f .nvmrc ]
      - name: Set-up Node with .nvmrc root folder
        if: ${{ steps.nvmrcRoot.outcome == 'success' }}
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          registry-url: "https://npm.pkg.github.com"
      - name: Set-up Node with .nvmrc input folder
        if: ${{ steps.nvmrcRoot.outcome != 'success' && steps.nvmrc.outcome == 'success' }}
        uses: actions/setup-node@v3
        with:
          node-version-file: "${{ inputs.path }}/.nvmrc"
          registry-url: "https://npm.pkg.github.com"
      - name: Set-up Node
        if: ${{ steps.nvmrcRoot.outcome != 'success' && steps.nvmrc.outcome != 'success' }}
        uses: actions/setup-node@v3
        with:
          registry-url: "https://npm.pkg.github.com"
      - name: Remove package-lock.json and yarn.lock entries from .gitignore.
        run: |
          if [ -f .gitignore ]; then
            sed -i '/package-lock.json/d' .gitignore;
            sed -i '/yarn.lock/d' .gitignore;
          fi;
      - name: Update dependency tree.
        id: update
        working-directory: ${{ inputs.path }}
        run: |
          rm -rf node_modules;
          if [ -f package-lock.json ]; then
            rm package-lock.json;
            npm install;
          elif [ -f yarn.lock ]; then
            export YARN_ENABLE_IMMUTABLE_INSTALLS=false;
            rm yarn.lock;
            yarn;
          elif [ -f package.json ]; then
            npm install;
          else
            echo "No package files were found. Maybe a path error?"
            exit 1;
          fi;
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm-token }}
      - name: Configure git for tradeshiftci
        id: configure
        uses: tradeshift/actions-git/configure-from-gpg-key@v1
        with:
          gpg-key: ${{ secrets.gpg-key }}
      - run: echo ${{ inputs.path }} > .update-deps
      - id: hash
        run: |
          echo "::set-output name=suffix::$(echo ${{ hashFiles('.update-deps') }} | head -c7)";
          rm .update-deps
      - id: formatPath
        if: ${{ always() }}
        run: |
          echo "::set-output name=path::$(echo ${{ inputs.path }} | sed 's:/*$::')"
      - name: Create Pull Request
        uses: tradeshift/create-pull-request@v3
        with:
          commit-message: "chore: update dependency tree for ${{ steps.formatPath.outputs.path }}/package.json"
          token: ${{ secrets.github-token }}
          committer: ${{ steps.configure.outputs.user }}
          author: ${{ steps.configure.outputs.user }}
          title: "chore: update dependency tree"
          body: |
            Updated dependency tree for the lock file of your node project. 

            By regenerating the lockfiles, the dependency tree has been updated to pull in the latest packages that match the dependency ranges in `package.json`. For each of those dependencies, the sub-dependencies are updated and so on. 

            None of these updates should be a breaking change, since they respect the [version ranges](https://semver.npmjs.com/). They'll potentially save you and your team a lot of time by preventing `Dependabot` vulnerability alerts that you'd have to deal with manually otherwise. 

            Good luck!

            _This workflow was created and is maintained by the [Developer Productivity](https://tradeshift.slack.com/archives/C78TDU0FJ) team._
          branch: auto-update-dependencies-${{ steps.hash.outputs.suffix }}
      - name: "Create an issue when auto-update fails"
        if: ${{ failure() && !cancelled() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            github.rest.issues.create({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Dependency tree auto-update for ${{ steps.formatPath.outputs.path }}/package.json failed.',
              body: `The dependency auto-update failed for the ${{ steps.formatPath.outputs.path }}/package.json file, which might indicate problems with the dependency tree for your project. You can view the failed job [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).`,
            });
